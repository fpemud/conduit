conduit is a synchronization center.

conduit can be run in 3 ways:
1. used by upper layer applications (through dbus)
2. used by timer (through conduit daemon)
3. used by peer (through conduit daemon)

conduit API should only register to Session Bus.
the main part of conduit is in user process, not in daemon.

we claim to do realtime synchronization

cfg status:
1. green: cfg is valid, peer is online
2. yellow: cfg is valid, peer is offline
3. red: cfg is not synchronized with peer

operations:
push: send my data to target, merge to target, fails if there's conflict
pull: fetch from target, merge to mine, fails if there's conflict
pull(accept-conflict): fetch from target, merge to mine, record conflict and tells the user
copy-to: ...
copy-from: ...

pre/post-operations:
accept-push:
stop-accept-push:
accept-pull:
stop-accept-pull:
accept-copy-to:
stop-accept-copy-to:
accept-copy-from:
stop-accept-copy-from:

not-through-conduit
through-conduit



local(left) --> local(right):
  right copy-from

local(left) <-- local(right):
  left copy-from

local(left,interactive) <-> local(right,interactive):
  left pull(accept-conflict)
  right pull(accept-conflict)

local(left,non-interactive) <-> local(right,non-interactive)
  left pull
  right pull


conduit(left) --> conduit-peer(right)
  right copy-from

conduit(left) <-- conduit-peer(right)
  left copy-from

conduit(left,interactive) <-> conduit-peer(right,interactive)
  left pull(accept-conflict)
  right pull(accept-conflict), there should be no conflict

conduit(left,non-interactive) <-> conduit-peer(right,non-interactive)
  left pull
  right pull

conduit(left,interactive) <-> conduit-peer(right,non-interactive)
  left pull(accept-conflict)
  right pull

conduit(left,non-interactive) <-> conduit-peer(right,interactive)
  left pull
  right pull(accept-conflict)


conduit(left) --> external(right)
  left copy-to

conduit(left) <-- external(right)
  left copy-from

conduit(left,interactive) <-> external(right)
  left pull(accept-conflict)
  left push

conduit(left,non-interactive) <-> external(right)
  left pull
  left push


external(left,controllable) --> external(right)
  left copy-to

external(left,controllable) <-- external(right)
  left copy-from

external(left,controllable,interactive) <-> external(right)
  left pull(accept-conflict)
  left push

external(left,controllable,non-interactive) <-> external(right)
  left pull
  left push




Data Type:
1. File
2. BrowserBootmark
3. Dir
4. 
x. custom defined Data Type





DataProviders:
t1. source, active
t2. source, passive
t3. sink, active
t4. sink, passive
t5. two-way, active
t6. two-way, passsive

sync-set:
1. one t1, sink is not here         ->
2. one t2, source is not here       ->
3. one t3, source is not here       <-
4. one t4, sink is not here         <-
5. t1 + t3                          ->
6. t2 + t4                          <-
7. t1 + t3



daemon is used to:
1. accept control message from peer, start user conduit process to do things
2. advertise to mdns
3. accept callback from cloud, if needed
4. do upnp to open port for cloud-callback
